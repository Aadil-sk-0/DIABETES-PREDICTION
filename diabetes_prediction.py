# -*- coding: utf-8 -*-
"""DIABETES PREDICTION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fRXNP4TvqcQsCxGF1U5T2GZi02Rl8m22

Importing the Required Libraries
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Collecting of Data and Analyzing
The PIMA **Dataset**



"""

# loading the diabetes dataset to a pandas DataFrame
diabetes_dataset = pd.read_csv('/content/diabetes - diabetes (1).csv')

"""Pandas used to Read a CSV file"""

pd.read_csv?

"""Printing the First 10 Rows of the Dataset"""

#Printing the first 10 rows of the Dataset
diabetes_dataset.head(10)

"""Number of Rows and Columns in this dataset

"""

diabetes_dataset.shape

"""Getting the Statistical measures of data

"""

diabetes_dataset.describe()

"""Count the Number of Outcomes"""

diabetes_dataset['Outcome'].value_counts()

"""Outcome of Data Describes

0 -> Non-Diabetic

1 -> Diabetic

Finding the MEAN of the Outcome

"""

diabetes_dataset.groupby('Outcome').mean()

"""Separating the Data and Labels

"""

X = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Standardization of Data"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Training of Model"""

classifier = svm.SVC(kernel='linear')

"""training the SVM(support vector machine)

"""

classifier.fit(X_train, Y_train)

"""EVALUATION OF MODEL

ACCURACY SCORE OF TRAINING DATA
"""

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

"""ACCURACY SCORE OF TEST DATA"""

print('Accuracy score of the test data : ', test_data_accuracy)

"""MAKING A PREDICTION SYSTEM"""

input_data = (5,16,72,19,17,25.8,0.467,51)

# changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')